diff --git a/lib/renderer.js b/lib/renderer.js
index 60153fa..7785ab5 100644
--- a/lib/renderer.js
+++ b/lib/renderer.js
@@ -1,3 +1,5 @@
+// @flow
+'use babel';  /* jshint esversion: 6 */
 const { TextEditor } = require('atom')
 const path = require('path')
 const createDOMPurify = require('dompurify')
@@ -24,45 +26,55 @@ exports.toDOMFragment = async function (text, filePath, grammar, callback) {
 
   const domFragment = render(text, filePath)
 
-  await highlightCodeBlocks(domFragment, grammar, makeAtomEditorNonInteractive)
+  // ianschange await highlightCodeBlocks(domFragment, grammar, makeAtomEditorNonInteractive)
 
   return domFragment
 }
 
 exports.toHTML = async function (text, filePath, grammar) {
+  console.log(`ianschange exports.toHTML text =${text}\n filePath=${filePath}\n grammar=${grammar}\n`);
   if (text == null) {
     text = ''
   }
 
   const domFragment = render(text, filePath)
   const div = document.createElement('div')
-
+  //
   div.appendChild(domFragment)
   document.body.appendChild(div)
-
-  await highlightCodeBlocks(div, grammar, convertAtomEditorToStandardElement)
-
+  //
+  // // ianschange await highlightCodeBlocks(div, grammar, convertAtomEditorToStandardElement)
+  //
   const result = div.innerHTML
   div.remove()
-
+  //
   return result
-}
-
-var render = function (text, filePath) {
-  if (marked == null || yamlFrontMatter == null || cheerio == null) {
-    marked = require('marked')
-    yamlFrontMatter = require('yaml-front-matter')
-    cheerio = require('cheerio')
-
-    renderer = new marked.Renderer()
-    renderer.listitem = function (text, isTask) {
-      const listAttributes = isTask ? ' class="task-list-item"' : ''
-
-      return `<li ${listAttributes}>${text}</li>\n`
-    }
-  }
-
-  marked.setOptions({
+} //END exports.toHTML
+
+//let htmloutputStandalone = Asciidoctor.convert(asciidocInputFromEditor_words, {   'standalone': true,  'attributes': { 'linkcss': true ,}});
+var render =  function (text, filePath) {
+  const Asciidoctor = require('asciidoctor')();
+  const textToHTML = Asciidoctor.convert(text,
+   {   'standalone': true,  'attributes': { 'linkcss': true ,}});
+   console.log(`ianschange <li> textToHTML >/li> = \n <li> ${text}</li>\n `);
+   return `<li> ${text}</li>\n`;
+   html = textToHTML;
+// ianschange render commented out & new version inserted
+// var render = function (text, filePath) {
+//   if (marked == null || yamlFrontMatter == null || cheerio == null) {
+//     marked = require('marked')
+//     yamlFrontMatter = require('yaml-front-matter')
+//     cheerio = require('cheerio')
+//
+//     renderer = new marked.Renderer()
+//     renderer.listitem = function (text, isTask) {
+//       const listAttributes = isTask ? ' class="task-list-item"' : ''
+//
+//       return `<li ${listAttributes}>${text}</li>\n`
+//     }
+//   }
+
+/*  marked.setOptions({
     breaks: atom.config.get('iansasciidoc-preview-frommarkdownpreview.breakOnSingleNewline'),
     renderer
   })
@@ -78,24 +90,24 @@ var render = function (text, filePath) {
   )
   $('code img').each((index, element) =>
     $(element).replaceWith($(element).attr('title'))
-  )
+  ) */
 
   html = $.html()
 
-  html = createDOMPurify().sanitize(html, {
+/*  html = createDOMPurify().sanitize(html, {
     ALLOW_UNKNOWN_PROTOCOLS: atom.config.get(
       'iansasciidoc-preview-frommarkdownpreview.allowUnsafeProtocols'
     )
-  })
+  }) */
 
   const template = document.createElement('template')
   template.innerHTML = html.trim()
   const fragment = template.content.cloneNode(true)
 
-  resolveImagePaths(fragment, filePath)
+  // resolveImagePaths(fragment, filePath)
 
   return fragment
-}
+} *///END render
 
 function renderYamlTable (variables) {
   const entries = Object.entries(variables)
@@ -234,7 +246,7 @@ var convertAtomEditorToStandardElement = (editorElement, preElement) => {
           const line2 = document.createElement('div')
           line2.className = 'line'
           line2.innerHTML = line.firstChild.innerHTML
-          preElement.appendChild(line2)
+        // ianschange  preElement.appendChild(line2)
         }
         editorElement.remove()
         resolve()
